SQL work

SELECT 
    first_name, last_name
FROM
    employees;
    
SELECT 
    *
FROM
    employees;

SELECT 
    dept_no
FROM
    departments;

SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Denis';
    
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Elvis';
    
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Kellie' AND gender = 'F';
    
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Kellie'
        OR first_name = 'Aruna';

SELECT 
    *
FROM
    employees
WHERE
    gender = 'F'
        AND (first_name = 'Kellie' OR first_name = 'Aruna');
        
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Cathie'
        OR first_name = 'Mark'
        OR first_name = 'Nathan';
        
/* The above works but is sloppy, there is a better way of doing this function by using the IN term*/

SELECT 
    *
FROM
    employees
WHERE
    first_name IN ('Cathie' , 'Mark', 'Nathan');
    
	/* now lets us NOT IN */
SELECT 
    *
FROM
    employees
WHERE
    first_name NOT IN ('John' , 'Mark', 'Jacob');
    
SELECT 
    *
FROM
    employees
WHERE
    hire_date LIKE ('%2000%')
        AND first_name LIKE ('Mark%');
        
SELECT 
    *
FROM
    employees
WHERE
    first_name LIKE ('%Jack%');

SELECT 
    *
FROM
    employees
WHERE
    first_name NOT LIKE ('%Jack%');
    
SELECT 
    *
FROM
    salaries
WHERE
    salary BETWEEN 66000 AND 70000;

/* the NOT BETWEEN will exclude the values you enter while the BETWEEN will include the vaules  */ 
SELECT 
    *
FROM
    employees
WHERE
    emp_no NOT BETWEEN 10004 AND 10012;

SELECT 
    dept_name
FROM
    departments
WHERE
    dept_no IS NOT NULL; 

SELECT 
    *
FROM
    employees
WHERE
    gender = 'f'
        AND hire_date >= '2000-01-01';
        
SELECT 
    *
FROM
    salaries
WHERE
    salary > 150000;
    
SELECT DISTINCT
    gender
FROM
    employees;
    
SELECT DISTINCT
    hire_date
FROM
    employees;
    
/*starting aggregate functions COUNT SUM MIN MAX and AVG*/

SELECT 
    COUNT(emp_no)
FROM
    employees;  
    
SELECT 
    COUNT(DISTINCT first_name)
FROM
    employees; 
    
SELECT 
    COUNT(*)
FROM
    salaries
WHERE
    salary >= 100000;
    
SELECT 
    *
FROM
    employees
ORDER BY first_name;  /*assumes ascending unless specified.*/

SELECT 
    *
FROM
    employees
ORDER BY emp_no DESC;
SELECT 
    *
FROM
    employees
ORDER BY first_name , last_name ASC;

SELECT 
    *
FROM
    employees
ORDER BY emp_no DESC;
SELECT 
    *
FROM
    employees
ORDER BY first_name , last_name ASC;

/* GROUP BY must be placed after WHERE and before ORDER BY*/
/* GROUP BY is better than SELECT DISTINCT when using aggeregate functions*/
/* Always include the field that you GROUP BY in the select statement*/

SELECT 
    first_name, COUNT(first_name)
FROM
    employees
GROUP BY first_name
ORDER BY first_name;
/* edit column headers to make them look more professional.*/

SELECT 
    first_name, COUNT(first_name) as names_count
FROM
    employees
GROUP BY first_name
ORDER BY first_name;

/* The HAVING command is like WHERE but comes after an applies to the GROUP BY command.
After HAVING you can have a condition with an aggragate function while using WHERE cannot*/
SELECT 
    *, AVG(salary)
FROM
    salaries
GROUP BY emp_no
HAVING AVG(salary) > 120000;

/* The WHERE function applies conditions before the data is sorted into groups. Therefore it is WHERE -> GROUP BY -> HAVING*/

SELECT 
    first_name, COUNT(first_name) AS names_count
FROM
    employees
WHERE
    hire_date > '1990-01-01'
GROUP BY first_name
HAVING names_count < 200
ORDER BY first_name DESC;

/* HAVING works after GROUP BY for aggregate constraints. */
SELECT
    emp_no
FROM
	dept_emp
WHERE
    from_date > '2000-01-01'
GROUP BY emp_no
HAVING COUNT(from_date) > 1
ORDER BY emp_no; 

SELECT 
    *
FROM
    salaries
ORDER BY salary DESC
LIMIT 10;
